USE AdventureWorks2019

-- 1.      How many products can you find in the Production.Product table?
SELECT COUNT(*) FROM Production.Product
SELECT COUNT(ProductID) FROM Production.Product

-- 2.      Write a query that retrieves the number of products in the Production.Product table that are included in a subcategory. The rows that have NULL in column ProductSubcategoryID are considered to not be a part of any subcategory.

SELECT COUNT(p.ProductSubcategoryID )
FROM Production.Product AS p
JOIN Production.ProductSubCategory AS c 
ON p.ProductSubcategoryID = c.ProductSubcategoryID

SELECT COUNT(ProductSubcategoryID) FROM Production.Product
WHERE ProductSubcategoryID IN
(SELECT ProductSubcategoryID from Production.ProductSubCategory WHERE ProductSubcategoryID IS NOT null)

-- 3.      How many Products reside in each SubCategory? Write a query to display the results with the following titles.
SELECT c.ProductSubcategoryID, COUNT(p.ProductSubcategoryID) AS CountedProducts
FROM Production.Product AS p
JOIN Production.ProductSubCategory AS c 
ON p.ProductSubcategoryID = c.ProductSubcategoryID
GROUP BY c.ProductSubcategoryID

-- 4.      How many products that do not have a product subcategory.
SELECT COUNT(ProductID) AS CountedProducts
FROM Production.Product
WHERE ProductSubcategoryID IS NULL

-- 5.      Write a query to list the sum of products quantity in the Production.ProductInventory table.
SELECT SUM(Quantity) AS SumOfProductQuantity
FROM Production.ProductInventory;

-- 6.    Write a query to list the sum of products in the Production.ProductInventory table and LocationID set to 40 
      -- and limit the result to include just summarized quantities less than 100. ProductID    TheSum
SELECT p.* FROM
(SELECT ProductID, SUM(Quantity) AS TheSum
FROM Production.ProductInventory
WHERE LocationID = 40
GROUP BY ProductID) p
WHERE p.TheSum < 100

-- 7.    Write a query to list the sum of products with the shelf information in the Production.ProductInventory table and 
        -- LocationID set to 40 and limit the result to include just summarized quantities less than 100
    -- Shelf      ProductID    TheSum
SELECT p.* FROM
(SELECT ProductID, Shelf, SUM(Quantity) AS TheSum
FROM Production.ProductInventory
WHERE LocationID = 40
GROUP BY ProductID, Shelf) p
WHERE p.TheSum < 100

-- 8. Write the query to list the average quantity for products where column LocationID has the value of 10 from the table 
    -- Production.ProductInventory table.
SELECT ProductID, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory
WHERE LocationID = 10
GROUP BY ProductID

-- 9. Write query to see the average quantity of products by shelf from the table Production.ProductInventory
    -- ProductID   Shelf      TheAvg
SELECT p.ProductID, s.Shelf, s.TheAvg
FROM Production.ProductInventory AS p
JOIN
(SELECT Shelf, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory
GROUP BY Shelf) AS s
on s.Shelf = p.Shelf

-- 10.  Write query  to see the average quantity  of  products by shelf excluding rows that has the value of N/A in 
        -- the column Shelf from the table Production.ProductInventory
    -- ProductID   Shelf      TheAvg
SELECT p.ProductID, s.Shelf, s.TheAvg
FROM Production.ProductInventory AS p
JOIN
(SELECT Shelf, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory
GROUP BY Shelf) AS s
on s.Shelf = p.Shelf
WHERE s.Shelf <> 'N/A'

-- 11.  List the members (rows) and average list price in the Production.Product table. This should be grouped independently 
        --over the Color and the Class column. Exclude the rows where Color or Class are null.
    --    Color                        Class              TheCount          AvgPrice

SELECT co.Color, cl.Class, co.TheCount, co.AvgPrice
FROM
(SELECT ProductID, Color, COUNT(ProductID) AS TheCount, AVG(ListPrice) AS AvgPrice
FROM Production.Product
WHERE Color IS NOT null AND Class IS NOT null
GROUP BY Color, ProductID) AS co
JOIN
(SELECT ProductID, Class, COUNT(ProductID) AS TheCount, AVG(ListPrice) AS AvgPrice
FROM Production.Product
WHERE Color IS NOT null AND Class IS NOT null
GROUP BY Class, ProductID) AS cl
ON co.ProductID = cl.ProductID

-- 12.   Write a query that lists the country and province names from person. CountryRegion and person. StateProvince tables. 
        --Join them and produce a result set similar to the following.
    --Country                        Province

SELECT cnreg.Name AS Country, stPro.Name AS Provence
FROM Person.Person AS person
JOIN Person.BusinessEntity AS busEnt
ON person.BusinessEntityID = busEnt.BusinessEntityID

JOIN Person.BusinessEntityAddress AS busEntAdr
ON busEnt.BusinessEntityID = busEntAdr.BusinessEntityID

JOIN Person.Address AS adr
ON adr.AddressID = busEntAdr.AddressID

JOIN Person.StateProvince AS stPro
ON stPro.StateProvinceID = adr.StateProvinceID

JOIN Person.CountryRegion AS cnreg
ON cnreg.CountryRegionCode = stPro.CountryRegionCode


-- 13.  Write a query that lists the country and province names from person. CountryRegion and person. StateProvince tables and 
        --list the countries filter them by Germany and Canada. Join them and produce a result set similar to the following.
    --Country                        Province