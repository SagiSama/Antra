USE AdventureWorks2019

-- 1.      How many products can you find in the Production.Product table?
SELECT COUNT(*) FROM Production.Product
SELECT COUNT(ProductID) FROM Production.Product

-- 2.      Write a query that retrieves the number of products in the Production.Product table that are included in a subcategory. The rows that have NULL in column ProductSubcategoryID are considered to not be a part of any subcategory.

SELECT COUNT(p.ProductSubcategoryID )
FROM Production.Product AS p
JOIN Production.ProductSubCategory AS c 
ON p.ProductSubcategoryID = c.ProductSubcategoryID

SELECT COUNT(ProductSubcategoryID) FROM Production.Product
WHERE ProductSubcategoryID IN
(SELECT ProductSubcategoryID from Production.ProductSubCategory WHERE ProductSubcategoryID IS NOT null)

-- 3.      How many Products reside in each SubCategory? Write a query to display the results with the following titles.
SELECT c.ProductSubcategoryID, COUNT(p.ProductSubcategoryID) AS CountedProducts
FROM Production.Product AS p
JOIN Production.ProductSubCategory AS c 
ON p.ProductSubcategoryID = c.ProductSubcategoryID
GROUP BY c.ProductSubcategoryID

-- 4.      How many products that do not have a product subcategory.
SELECT COUNT(ProductID) AS CountedProducts
FROM Production.Product
WHERE ProductSubcategoryID IS NULL

-- 5.      Write a query to list the sum of products quantity in the Production.ProductInventory table.
SELECT SUM(Quantity) AS SumOfProductQuantity
FROM Production.ProductInventory;

-- 6.    Write a query to list the sum of products in the Production.ProductInventory table and LocationID set to 40 
      -- and limit the result to include just summarized quantities less than 100. ProductID    TheSum
SELECT p.* FROM
(SELECT ProductID, SUM(Quantity) AS TheSum
FROM Production.ProductInventory
WHERE LocationID = 40
GROUP BY ProductID) p
WHERE p.TheSum < 100

-- 7.    Write a query to list the sum of products with the shelf information in the Production.ProductInventory table and 
        -- LocationID set to 40 and limit the result to include just summarized quantities less than 100
    -- Shelf      ProductID    TheSum
SELECT p.* FROM
(SELECT ProductID, Shelf, SUM(Quantity) AS TheSum
FROM Production.ProductInventory
WHERE LocationID = 40
GROUP BY ProductID, Shelf) p
WHERE p.TheSum < 100

-- 8. Write the query to list the average quantity for products where column LocationID has the value of 10 from the table 
    -- Production.ProductInventory table.
SELECT ProductID, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory
WHERE LocationID = 10
GROUP BY ProductID

-- 9. Write query to see the average quantity of products by shelf from the table Production.ProductInventory
    -- ProductID   Shelf      TheAvg
SELECT p.ProductID, s.Shelf, s.TheAvg
FROM Production.ProductInventory AS p
JOIN
(SELECT Shelf, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory
GROUP BY Shelf) AS s
on s.Shelf = p.Shelf

-- 10.  Write query  to see the average quantity  of  products by shelf excluding rows that has the value of N/A in 
        -- the column Shelf from the table Production.ProductInventory
    -- ProductID   Shelf      TheAvg
SELECT p.ProductID, s.Shelf, s.TheAvg
FROM Production.ProductInventory AS p
JOIN
(SELECT Shelf, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory
GROUP BY Shelf) AS s
on s.Shelf = p.Shelf
WHERE s.Shelf <> 'N/A'

-- 11.  List the members (rows) and average list price in the Production.Product table. This should be grouped independently 
        --over the Color and the Class column. Exclude the rows where Color or Class are null.
    --    Color                        Class              TheCount          AvgPrice

SELECT co.Color, cl.Class, co.TheCount, co.AvgPrice
FROM
(SELECT ProductID, Color, COUNT(ProductID) AS TheCount, AVG(ListPrice) AS AvgPrice
FROM Production.Product
WHERE Color IS NOT null AND Class IS NOT null
GROUP BY Color, ProductID) AS co
JOIN
(SELECT ProductID, Class, COUNT(ProductID) AS TheCount, AVG(ListPrice) AS AvgPrice
FROM Production.Product
WHERE Color IS NOT null AND Class IS NOT null
GROUP BY Class, ProductID) AS cl
ON co.ProductID = cl.ProductID

-- 12.   Write a query that lists the country and province names from person. CountryRegion and person. StateProvince tables. 
        --Join them and produce a result set similar to the following.
    --Country                        Province

SELECT cnreg.Name AS Country, stPro.Name AS Provence
FROM Person.Person AS person
JOIN Person.BusinessEntity AS busEnt
ON person.BusinessEntityID = busEnt.BusinessEntityID

JOIN Person.BusinessEntityAddress AS busEntAdr
ON busEnt.BusinessEntityID = busEntAdr.BusinessEntityID

JOIN Person.Address AS adr
ON adr.AddressID = busEntAdr.AddressID

JOIN Person.StateProvince AS stPro
ON stPro.StateProvinceID = adr.StateProvinceID

JOIN Person.CountryRegion AS cnreg
ON cnreg.CountryRegionCode = stPro.CountryRegionCode


-- 13.  Write a query that lists the country and province names from person. CountryRegion and person. StateProvince tables and 
        --list the countries filter them by Germany and Canada. Join them and produce a result set similar to the following.
    --Country                        Province
SELECT cnreg.Name AS Country, stPro.Name AS Provence
FROM Person.Person AS person
JOIN Person.BusinessEntity AS busEnt
ON person.BusinessEntityID = busEnt.BusinessEntityID

JOIN Person.BusinessEntityAddress AS busEntAdr
ON busEnt.BusinessEntityID = busEntAdr.BusinessEntityID

JOIN Person.Address AS adr
ON adr.AddressID = busEntAdr.AddressID

JOIN Person.StateProvince AS stPro
ON stPro.StateProvinceID = adr.StateProvinceID

JOIN Person.CountryRegion AS cnreg
ON cnreg.CountryRegionCode = stPro.CountryRegionCode
WHERE cnreg.Name IN ('Germany', 'Canada')

     --Using Northwnd Database: (Use aliases for all the Joins)
USE Northwind

--14.  List all Products that has been sold at least once in last 26 years.
SELECT p.ProductID, p.ProductName, o.OrderDate
FROM Products AS p
JOIN [Order Details] AS od
ON od.ProductID = p.ProductID
JOIN Orders AS o
ON o.OrderID = od.OrderID
WHERE o.OrderDate > DATEADD(year, -26, GETDATE())

--15.  List top 5 locations (Zip Code) where the products sold most.
SELECT TOP(5) o.ShipPostalCode
FROM Products AS p
JOIN [Order Details] AS od
ON od.ProductID = p.ProductID
JOIN Orders AS o
ON o.OrderID = od.OrderID
GROUP BY o.ShipPostalCode
ORDER BY COUNT(p.ProductID) DESC

--16.  List top 5 locations (Zip Code) where the products sold most in last 26 years.
SELECT TOP(5) o.ShipPostalCode
FROM Products AS p
JOIN [Order Details] AS od
ON od.ProductID = p.ProductID
JOIN Orders AS o
ON o.OrderID = od.OrderID
WHERE o.OrderDate > DATEADD(year, -26, GETDATE())
GROUP BY o.ShipPostalCode
ORDER BY COUNT(p.ProductID) DESC

--17.   List all city names and number of customers in that city.     
SELECT c.City, COUNT(c.CustomerID) AS NumberOfCustomers 
FROM Customers c
FULL OUTER JOIN Orders o
ON o.CustomerID = c.CustomerID
GROUP BY c.City

SELECT ShipCity, COUNT(CustomerID) AS NumberOfCustomers 
FROM Orders
GROUP BY ShipCity

--18.  List city names which have more than 2 customers, and number of customers in that city
SELECT ShipCity, COUNT(CustomerID) AS NumberOfCustomers 
FROM Orders
GROUP BY ShipCity
HAVING(COUNT(CustomerID)) > 2

--19.  List the names of customers who placed orders after 1/1/98 with order date.
SELECT ContactName
FROM Customers
WHERE CustomerID IN
(SELECT CustomerID from Orders
WHERE OrderDate > '1998-01-01 00:00:00.000')

--20.  List the names of all customers with most recent order dates
SELECT DISTINCT c.ContactName, o.OrderDate
FROM Customers c
JOIN Orders o
on c.CustomerID = o.CustomerID
GROUP BY o.orDerDate, c.ContactName
ORDER BY o.OrderDate DESC

--21.  Display the names of all customers  along with the  count of products they bought
SELECT DISTINCT c.ContactName, COUNT(od.ProductID) AS Count
FROM Customers c
JOIN Orders o
ON c.CustomerID = o.CustomerID
JOIN [Order Details] od
ON od.OrderID = o.OrderID
GROUP BY c.ContactName


--22.  Display the customer ids who bought more than 100 Products with count of products.
SELECT DISTINCT c.ContactName, COUNT(od.Quantity) AS Quantity
FROM Customers c
JOIN Orders o
ON c.CustomerID = o.CustomerID
JOIN [Order Details] od
ON od.OrderID = o.OrderID
GROUP BY c.ContactName
HAVING(COUNT(od.Quantity)) > 100

--23.  List all of the possible ways that suppliers can ship their products. Display the results as below
 --   Supplier Company Name                Shipping Company Name
    SELECT DISTINCT su.CompanyName AS 'Supplier Company Name', sh.CompanyName AS 'Shipping Company Name'
    FROM Suppliers su
    JOIN Products p
    ON p.SupplierID = su.SupplierID
    JOIN [Order Details] od
    ON od.ProductID = p.ProductID
    JOIN Orders o
    ON o.OrderID = od.OrderID
    JOIN Shippers sh
    ON sh.ShipperID = o.ShipVia 

--24.  Display the products order each day. Show Order date and Product Name.
DECLARE @StartDate datetime,@EndDate datetime

SET @StartDate = '2000-07-04'
SET @EndDate = '2024-04-18'

;WITH CalendarDates(DATEPARAM) AS
(
    SELECT @StartDate AS datetime
    UNION ALL
    SELECT DATEADD(DAY, 1, DATEPARAM)
    FROM CalendarDates
    WHERE DATEPARAM < @EndDate 
)
SELECT p.ProductName, o.OrderDate
FROM Orders o
JOIN [Order Details] od
ON od.OrderID = o.OrderID
JOIN Products p
ON p.ProductID = od.ProductID 
JOIN CalendarDates cd
ON cd.DATEPARAM = convert(date, o.OrderDate)
Group By convert(date, o.OrderDate), cd.DATEPARAM, p.ProductName

--25.  Displays pairs of employees who have the same job title.
SELECT FirstName, Title, 
(SELECT TOP(1) FirstName FROM Employees e1 WHERE e1.EmployeeID <> e2.EmployeeID AND e1.Title = e2.Title) AS Pair
FROM Employees e2

--26.  Display all the Managers who have more than 2 employees reporting to them.
SELECT e1.FirstName, COUNT(e1.EmployeeID)
FROM Employees e1
JOIN Employees e2
ON e1.EmployeeID = e2.ReportsTo
GROUP BY e1.EmployeeID, e1.FirstName
HAVING COUNT(e1.EmployeeID) > 2

--27.  Display the customers and suppliers by city. The results should have the following columns
--City
--Name
--Contact Name,
--Type (Customer or Supplier)
SELECT City, CompanyName AS Name, ContactName AS 'Contact Name', 'Customer' AS Type
FROM Customers
UNION
SELECT City, CompanyName AS Name, ContactName AS 'Contact Name', 'Supplier' AS Type
FROM Suppliers